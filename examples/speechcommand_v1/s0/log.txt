Start training ...
/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/distributed/launch.py:163: DeprecationWarning: The 'warn' method is deprecated, use 'warning' instead
  logger.warn(
The module torch.distributed.launch is deprecated and going to be removed in future.Migrate to torch.distributed.run
INFO:torch.distributed.launcher.api:Starting elastic_operator with launch configs:
  entrypoint       : wekws/bin/train.py
  min_nodes        : 1
  max_nodes        : 1
  nproc_per_node   : 1
  run_id           : 0fc1c011-6177-4432-81d5-64d7b5fbf5c0
  rdzv_backend     : c10d
  rdzv_endpoint    : localhost:29400
  rdzv_configs     : {'timeout': 900}
  max_restarts     : 3
  monitor_interval : 5
  log_dir          : None
  metrics_cfg      : {}

INFO:torch.distributed.elastic.agent.server.local_elastic_agent:log directory set to: /tmp/torchelastic_sbvrj_2d/0fc1c011-6177-4432-81d5-64d7b5fbf5c0_9d_jfs8_
INFO:torch.distributed.elastic.agent.server.api:[default] starting workers for entrypoint: python
INFO:torch.distributed.elastic.agent.server.api:[default] Rendezvous'ing worker group
/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/distributed/elastic/utils/store.py:52: FutureWarning: This is an experimental API and will be changed in future.
  warnings.warn(
INFO:torch.distributed.elastic.agent.server.api:[default] Rendezvous complete for workers. Result:
  restart_count=0
  master_addr=linger.novalocal
  master_port=50963
  group_rank=0
  group_world_size=1
  local_ranks=[0]
  role_ranks=[0]
  global_ranks=[0]
  role_world_sizes=[1]
  global_world_sizes=[1]

INFO:torch.distributed.elastic.agent.server.api:[default] Starting worker group
INFO:torch.distributed.elastic.multiprocessing:Setting worker0 reply file to: /tmp/torchelastic_sbvrj_2d/0fc1c011-6177-4432-81d5-64d7b5fbf5c0_9d_jfs8_/attempt_0/0/error.json
Namespace(checkpoint=None, cmvn_file=None, config='conf/mdtc.yaml', cv_data='data/valid/data.list', dist_backend='nccl', gpus='0', min_duration=50, model_dir='exp/mdtc', noise_lmdb=None, norm_var=False, num_keywords=11, num_workers=8, pin_memory=False, prefetch=100, reverb_lmdb=None, seed=777, tensorboard_dir='tensorboard', train_data='data/train/data.list')
Receptive Fields: 244
KWSModel(
  (preprocessing): LinearSubsampling1(
    (out): Sequential(
      (0): Linear(in_features=80, out_features=64, bias=True)
      (1): ReLU()
    )
    (quant): QuantStub()
    (dequant): DeQuantStub()
  )
  (backbone): MDTC(
    (preprocessor): TCNBlock(
      (conv1): DSDilatedConv1d(
        (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
        (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
      )
      (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU()
      (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
      (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU()
    )
    (relu): ReLU()
    (blocks): ModuleList(
      (0): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
      (1): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
      (2): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
      (3): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
    )
  )
  (classifier): GlobalClassifier(
    (classifier): Sequential(
      (0): Linear(in_features=64, out_features=64, bias=True)
      (1): ReLU()
      (2): Dropout(p=0.5, inplace=False)
      (3): Linear(in_features=64, out_features=11, bias=True)
    )
  )
  (activation): Identity()
)
the number of model params: 164555
2023-08-17 14:32:26,081 INFO Checkpoint: save to checkpoint exp/mdtc/init.pt
2023-08-17 14:32:26,106 INFO Epoch 0 TRAIN info lr 0.001
2023-08-17 14:32:30,066 DEBUG TRAIN Batch 0/0 loss 6.13837528 acc 15.00000000
Traceback (most recent call last):
  File "wekws/bin/train.py", line 250, in <module>
    main()
  File "wekws/bin/train.py", line 223, in main
    executor.train(model, optimizer, train_data_loader, device, writer,
  File "/data/user/yswang/task/wekws/wekws/wekws/utils/executor.py", line 45, in train
    logits, _ = model(feats)
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/data/user/yswang/task/wekws/wekws/wekws/model/kws_model.py", line 72, in forward
    x, out_cache = self.backbone(x, in_cache)
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/data/user/yswang/task/wekws/wekws/wekws/model/mdtc.py", line 270, in forward
    new_cache = torch.cat(out_caches, dim=2)
RuntimeError: CUDA out of memory. Tried to allocate 20.00 MiB (GPU 0; 14.76 GiB total capacity; 379.56 MiB already allocated; 9.75 MiB free; 384.00 MiB reserved in total by PyTorch)
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: 1) local_rank: 0 (pid: 18526) of binary: /data/user/yswang/anaconda3/envs/wekws/bin/python
ERROR:torch.distributed.elastic.agent.server.local_elastic_agent:[default] Worker group failed
INFO:torch.distributed.elastic.agent.server.api:[default] Worker group FAILED. 3/3 attempts left; will restart worker group
INFO:torch.distributed.elastic.agent.server.api:[default] Stopping worker group
INFO:torch.distributed.elastic.agent.server.api:[default] Rendezvous'ing worker group
INFO:torch.distributed.elastic.agent.server.api:[default] Rendezvous complete for workers. Result:
  restart_count=1
  master_addr=linger.novalocal
  master_port=41642
  group_rank=0
  group_world_size=1
  local_ranks=[0]
  role_ranks=[0]
  global_ranks=[0]
  role_world_sizes=[1]
  global_world_sizes=[1]

INFO:torch.distributed.elastic.agent.server.api:[default] Starting worker group
INFO:torch.distributed.elastic.multiprocessing:Setting worker0 reply file to: /tmp/torchelastic_sbvrj_2d/0fc1c011-6177-4432-81d5-64d7b5fbf5c0_9d_jfs8_/attempt_1/0/error.json
Namespace(checkpoint=None, cmvn_file=None, config='conf/mdtc.yaml', cv_data='data/valid/data.list', dist_backend='nccl', gpus='0', min_duration=50, model_dir='exp/mdtc', noise_lmdb=None, norm_var=False, num_keywords=11, num_workers=8, pin_memory=False, prefetch=100, reverb_lmdb=None, seed=777, tensorboard_dir='tensorboard', train_data='data/train/data.list')
Receptive Fields: 244
KWSModel(
  (preprocessing): LinearSubsampling1(
    (out): Sequential(
      (0): Linear(in_features=80, out_features=64, bias=True)
      (1): ReLU()
    )
    (quant): QuantStub()
    (dequant): DeQuantStub()
  )
  (backbone): MDTC(
    (preprocessor): TCNBlock(
      (conv1): DSDilatedConv1d(
        (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
        (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
      )
      (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU()
      (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
      (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU()
    )
    (relu): ReLU()
    (blocks): ModuleList(
      (0): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
      (1): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
      (2): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
      (3): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
    )
  )
  (classifier): GlobalClassifier(
    (classifier): Sequential(
      (0): Linear(in_features=64, out_features=64, bias=True)
      (1): ReLU()
      (2): Dropout(p=0.5, inplace=False)
      (3): Linear(in_features=64, out_features=11, bias=True)
    )
  )
  (activation): Identity()
)
the number of model params: 164555
2023-08-17 14:32:41,134 INFO Checkpoint: save to checkpoint exp/mdtc/init.pt
2023-08-17 14:32:41,158 INFO Epoch 0 TRAIN info lr 0.001
2023-08-17 14:32:45,144 DEBUG TRAIN Batch 0/0 loss 6.13837528 acc 15.00000000
Traceback (most recent call last):
  File "wekws/bin/train.py", line 250, in <module>
    main()
  File "wekws/bin/train.py", line 223, in main
    executor.train(model, optimizer, train_data_loader, device, writer,
  File "/data/user/yswang/task/wekws/wekws/wekws/utils/executor.py", line 45, in train
    logits, _ = model(feats)
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/data/user/yswang/task/wekws/wekws/wekws/model/kws_model.py", line 72, in forward
    x, out_cache = self.backbone(x, in_cache)
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/data/user/yswang/task/wekws/wekws/wekws/model/mdtc.py", line 270, in forward
    new_cache = torch.cat(out_caches, dim=2)
RuntimeError: CUDA out of memory. Tried to allocate 20.00 MiB (GPU 0; 14.76 GiB total capacity; 379.56 MiB already allocated; 9.75 MiB free; 384.00 MiB reserved in total by PyTorch)
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: 1) local_rank: 0 (pid: 18919) of binary: /data/user/yswang/anaconda3/envs/wekws/bin/python
ERROR:torch.distributed.elastic.agent.server.local_elastic_agent:[default] Worker group failed
INFO:torch.distributed.elastic.agent.server.api:[default] Worker group FAILED. 2/3 attempts left; will restart worker group
INFO:torch.distributed.elastic.agent.server.api:[default] Stopping worker group
INFO:torch.distributed.elastic.agent.server.api:[default] Rendezvous'ing worker group
INFO:torch.distributed.elastic.agent.server.api:[default] Rendezvous complete for workers. Result:
  restart_count=2
  master_addr=linger.novalocal
  master_port=53977
  group_rank=0
  group_world_size=1
  local_ranks=[0]
  role_ranks=[0]
  global_ranks=[0]
  role_world_sizes=[1]
  global_world_sizes=[1]

INFO:torch.distributed.elastic.agent.server.api:[default] Starting worker group
INFO:torch.distributed.elastic.multiprocessing:Setting worker0 reply file to: /tmp/torchelastic_sbvrj_2d/0fc1c011-6177-4432-81d5-64d7b5fbf5c0_9d_jfs8_/attempt_2/0/error.json
Namespace(checkpoint=None, cmvn_file=None, config='conf/mdtc.yaml', cv_data='data/valid/data.list', dist_backend='nccl', gpus='0', min_duration=50, model_dir='exp/mdtc', noise_lmdb=None, norm_var=False, num_keywords=11, num_workers=8, pin_memory=False, prefetch=100, reverb_lmdb=None, seed=777, tensorboard_dir='tensorboard', train_data='data/train/data.list')
Receptive Fields: 244
KWSModel(
  (preprocessing): LinearSubsampling1(
    (out): Sequential(
      (0): Linear(in_features=80, out_features=64, bias=True)
      (1): ReLU()
    )
    (quant): QuantStub()
    (dequant): DeQuantStub()
  )
  (backbone): MDTC(
    (preprocessor): TCNBlock(
      (conv1): DSDilatedConv1d(
        (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
        (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
      )
      (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU()
      (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
      (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU()
    )
    (relu): ReLU()
    (blocks): ModuleList(
      (0): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
      (1): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
      (2): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
      (3): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
    )
  )
  (classifier): GlobalClassifier(
    (classifier): Sequential(
      (0): Linear(in_features=64, out_features=64, bias=True)
      (1): ReLU()
      (2): Dropout(p=0.5, inplace=False)
      (3): Linear(in_features=64, out_features=11, bias=True)
    )
  )
  (activation): Identity()
)
the number of model params: 164555
2023-08-17 14:32:56,121 INFO Checkpoint: save to checkpoint exp/mdtc/init.pt
2023-08-17 14:32:56,145 INFO Epoch 0 TRAIN info lr 0.001
2023-08-17 14:33:00,342 DEBUG TRAIN Batch 0/0 loss 6.13837528 acc 15.00000000
Traceback (most recent call last):
  File "wekws/bin/train.py", line 250, in <module>
    main()
  File "wekws/bin/train.py", line 223, in main
    executor.train(model, optimizer, train_data_loader, device, writer,
  File "/data/user/yswang/task/wekws/wekws/wekws/utils/executor.py", line 45, in train
    logits, _ = model(feats)
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/data/user/yswang/task/wekws/wekws/wekws/model/kws_model.py", line 72, in forward
    x, out_cache = self.backbone(x, in_cache)
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/data/user/yswang/task/wekws/wekws/wekws/model/mdtc.py", line 270, in forward
    new_cache = torch.cat(out_caches, dim=2)
RuntimeError: CUDA out of memory. Tried to allocate 20.00 MiB (GPU 0; 14.76 GiB total capacity; 379.56 MiB already allocated; 9.75 MiB free; 384.00 MiB reserved in total by PyTorch)
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: 1) local_rank: 0 (pid: 19457) of binary: /data/user/yswang/anaconda3/envs/wekws/bin/python
ERROR:torch.distributed.elastic.agent.server.local_elastic_agent:[default] Worker group failed
INFO:torch.distributed.elastic.agent.server.api:[default] Worker group FAILED. 1/3 attempts left; will restart worker group
INFO:torch.distributed.elastic.agent.server.api:[default] Stopping worker group
INFO:torch.distributed.elastic.agent.server.api:[default] Rendezvous'ing worker group
INFO:torch.distributed.elastic.agent.server.api:[default] Rendezvous complete for workers. Result:
  restart_count=3
  master_addr=linger.novalocal
  master_port=47745
  group_rank=0
  group_world_size=1
  local_ranks=[0]
  role_ranks=[0]
  global_ranks=[0]
  role_world_sizes=[1]
  global_world_sizes=[1]

INFO:torch.distributed.elastic.agent.server.api:[default] Starting worker group
INFO:torch.distributed.elastic.multiprocessing:Setting worker0 reply file to: /tmp/torchelastic_sbvrj_2d/0fc1c011-6177-4432-81d5-64d7b5fbf5c0_9d_jfs8_/attempt_3/0/error.json
Namespace(checkpoint=None, cmvn_file=None, config='conf/mdtc.yaml', cv_data='data/valid/data.list', dist_backend='nccl', gpus='0', min_duration=50, model_dir='exp/mdtc', noise_lmdb=None, norm_var=False, num_keywords=11, num_workers=8, pin_memory=False, prefetch=100, reverb_lmdb=None, seed=777, tensorboard_dir='tensorboard', train_data='data/train/data.list')
Receptive Fields: 244
KWSModel(
  (preprocessing): LinearSubsampling1(
    (out): Sequential(
      (0): Linear(in_features=80, out_features=64, bias=True)
      (1): ReLU()
    )
    (quant): QuantStub()
    (dequant): DeQuantStub()
  )
  (backbone): MDTC(
    (preprocessor): TCNBlock(
      (conv1): DSDilatedConv1d(
        (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
        (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
      )
      (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu1): ReLU()
      (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
      (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu2): ReLU()
    )
    (relu): ReLU()
    (blocks): ModuleList(
      (0): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
      (1): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
      (2): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
      (3): TCNStack(
        (res_blocks): ModuleList(
          (0): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (1): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(2,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (2): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(4,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
          (3): TCNBlock(
            (conv1): DSDilatedConv1d(
              (conv): Conv1d(64, 64, kernel_size=(5,), stride=(1,), dilation=(8,), groups=64)
              (bn): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (pointwise): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            )
            (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu1): ReLU()
            (conv2): Conv1d(64, 64, kernel_size=(1,), stride=(1,))
            (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu2): ReLU()
          )
        )
      )
    )
  )
  (classifier): GlobalClassifier(
    (classifier): Sequential(
      (0): Linear(in_features=64, out_features=64, bias=True)
      (1): ReLU()
      (2): Dropout(p=0.5, inplace=False)
      (3): Linear(in_features=64, out_features=11, bias=True)
    )
  )
  (activation): Identity()
)
the number of model params: 164555
2023-08-17 14:33:11,185 INFO Checkpoint: save to checkpoint exp/mdtc/init.pt
2023-08-17 14:33:11,211 INFO Epoch 0 TRAIN info lr 0.001
2023-08-17 14:33:15,316 DEBUG TRAIN Batch 0/0 loss 6.13837528 acc 15.00000000
Traceback (most recent call last):
  File "wekws/bin/train.py", line 250, in <module>
    main()
  File "wekws/bin/train.py", line 223, in main
    executor.train(model, optimizer, train_data_loader, device, writer,
  File "/data/user/yswang/task/wekws/wekws/wekws/utils/executor.py", line 45, in train
    logits, _ = model(feats)
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/data/user/yswang/task/wekws/wekws/wekws/model/kws_model.py", line 72, in forward
    x, out_cache = self.backbone(x, in_cache)
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/data/user/yswang/task/wekws/wekws/wekws/model/mdtc.py", line 270, in forward
    new_cache = torch.cat(out_caches, dim=2)
RuntimeError: CUDA out of memory. Tried to allocate 20.00 MiB (GPU 0; 14.76 GiB total capacity; 379.56 MiB already allocated; 9.75 MiB free; 384.00 MiB reserved in total by PyTorch)
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: 1) local_rank: 0 (pid: 19883) of binary: /data/user/yswang/anaconda3/envs/wekws/bin/python
ERROR:torch.distributed.elastic.agent.server.local_elastic_agent:[default] Worker group failed
INFO:torch.distributed.elastic.agent.server.api:Local worker group finished (FAILED). Waiting 300 seconds for other agents to finish
/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/distributed/elastic/utils/store.py:70: FutureWarning: This is an experimental API and will be changed in future.
  warnings.warn(
INFO:torch.distributed.elastic.agent.server.api:Done waiting for other agents. Elapsed: 0.0006177425384521484 seconds
{"name": "torchelastic.worker.status.FAILED", "source": "WORKER", "timestamp": 0, "metadata": {"run_id": "0fc1c011-6177-4432-81d5-64d7b5fbf5c0", "global_rank": 0, "group_rank": 0, "worker_id": "19883", "role": "default", "hostname": "linger.novalocal", "state": "FAILED", "total_run_time": 60, "rdzv_backend": "c10d", "raw_error": "{\"message\": \"<NONE>\"}", "metadata": "{\"group_world_size\": 1, \"entry_point\": \"python\", \"local_rank\": [0], \"role_rank\": [0], \"role_world_size\": [1]}", "agent_restarts": 3}}
{"name": "torchelastic.worker.status.SUCCEEDED", "source": "AGENT", "timestamp": 0, "metadata": {"run_id": "0fc1c011-6177-4432-81d5-64d7b5fbf5c0", "global_rank": null, "group_rank": 0, "worker_id": null, "role": "default", "hostname": "linger.novalocal", "state": "SUCCEEDED", "total_run_time": 60, "rdzv_backend": "c10d", "raw_error": null, "metadata": "{\"group_world_size\": 1, \"entry_point\": \"python\"}", "agent_restarts": 3}}
/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/distributed/elastic/multiprocessing/errors/__init__.py:354: UserWarning: 

**********************************************************************
               CHILD PROCESS FAILED WITH NO ERROR_FILE                
**********************************************************************
CHILD PROCESS FAILED WITH NO ERROR_FILE
Child process 19883 (local_rank 0) FAILED (exitcode 1)
Error msg: Process failed with exitcode 1
Without writing an error file to <N/A>.
While this DOES NOT affect the correctness of your application,
no trace information about the error will be available for inspection.
Consider decorating your top level entrypoint function with
torch.distributed.elastic.multiprocessing.errors.record. Example:

  from torch.distributed.elastic.multiprocessing.errors import record

  @record
  def trainer_main(args):
     # do train
**********************************************************************
  warnings.warn(_no_error_file_warning_msg(rank, failure))
Traceback (most recent call last):
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/distributed/launch.py", line 173, in <module>
    main()
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/distributed/launch.py", line 169, in main
    run(args)
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/distributed/run.py", line 621, in run
    elastic_launch(
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/distributed/launcher/api.py", line 116, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/distributed/elastic/multiprocessing/errors/__init__.py", line 348, in wrapper
    return f(*args, **kwargs)
  File "/data/user/yswang/anaconda3/envs/wekws/lib/python3.8/site-packages/torch/distributed/launcher/api.py", line 245, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
***************************************
       wekws/bin/train.py FAILED       
=======================================
Root Cause:
[0]:
  time: 2023-08-17_14:33:19
  rank: 0 (local_rank: 0)
  exitcode: 1 (pid: 19883)
  error_file: <N/A>
  msg: "Process failed with exitcode 1"
=======================================
Other Failures:
  <NO_OTHER_FAILURES>
***************************************

